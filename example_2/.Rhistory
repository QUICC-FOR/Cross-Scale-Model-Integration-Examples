par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
par(mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n')
plot(predict.x$xvals, colMeans(gam.preds, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("n =", nrow(validation)), cex=0.7)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
par(mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n')
plot(predict.x$xvals, colMeans(gam.preds, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("n =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
paperwidth = 4
dpi = 600
hToWRatio = 0.85
width = as.integer(dpi*paperwidth)
height = as.integer(width * hToWRatio)
fontsize = 12
png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
par(mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n')
plot(predict.x$xvals, colMeans(gam.preds, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("n =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
dev.off()
paperwidth = 4
dpi = 600
hToWRatio = 0.85
width = as.integer(dpi*paperwidth)
height = as.integer(width * hToWRatio)
fontsize = 12
png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
par(mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("n =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
dev.off()
ls()
rm(list=ls())
setwd("~/Dropbox/work/projects/Cross-Scale-Model-Integration-Examples_git/example_2")
library(coda)
library(gam)
validation = readRDS("dat/rawData.rds")$valid
calib = readRDS("dat/rawData.rds")$calib
load("results/posteriors.rdata")
makePred = function(bn, data) {
with(data, plogis(bn[1] + bn[2]*ddeg + bn[3]*ddeg^2 + bn[4]*ddeg^3 +
bn[5]*an_prcp + bn[6]*an_prcp^2 + bn[7]*pToPET + bn[8]*pToPET^2))
}
## presDat = validation$presObs
presDat = with(validation, PresObs + ifelse(is.na(pres), 0, pres))
classify = function(x, nclass) ifelse(x==1, nclass-1, floor(x*nclass))/nclass
ncats=20
xvals = seq(0.05, 0.95, length.out=ncats)
predict.x = data.frame(xvals=seq(0,1, length.out=200))
gam.preds.naive = matrix(NA, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
gam.preds.int = matrix(NA, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
n.gam.naive = matrix(0, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
n.gam.int = matrix(0, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
for(i in 1:nrow(naivePosterior))
{
preds.naive = data.frame(pres=presDat, predict=makePred(naivePosterior[i,], validation))
preds.int = data.frame(pres=presDat, predict=makePred(intPresPosterior[i,], validation))
# classify predictions
preds.naive$class = classify(preds.naive$predict, ncats)
preds.int$class = classify(preds.int$predict, ncats)
nclass.naive = length(unique(preds.naive$class))
nclass.int = length(unique(preds.int$class))
freqs.naive = freqs.int = nn = ni = rep(NA, ncats)
freqs.naive[1:nclass] = as.numeric(with(preds.naive, table(pres, class)[2,] / table(class)))
freqs.int[1:nclass] = as.numeric(with(preds.int, table(pres, class)[2,] / table(class)))
nn[1:nclass] = as.numeric(with(preds.naive, table(class)))
ni[1:nclass] = as.numeric(with(preds.int, table(class)))
n.gam.naive.mod = gam(I(log(nn))~s(xvals,3))
n.gam.int.mod = gam(I(log(ni))~s(xvals,3))
n.gam.naive[i,] = predict(n.gam.naive.mod, newdata=predict.x)
n.gam.int[i,] = predict(n.gam.int.mod, newdata=predict.x)
gam.naive.mod = gam(freqs.naive~s(xvals, 3))
gam.int.mod = gam(freqs.int~s(xvals, 3))
gam.preds.naive[i,] = predict(gam.naive.mod, newdata=predict.x)
gam.preds.int[i,] = predict(gam.int.mod, newdata=predict.x)
}
col.gam='#00ff33'
plot.int = function(x, y, col, tr='33')
{
upper = apply(y, 2, quantile, 0.975, na.rm=T)
lower = apply(y, 2, quantile, 0.025, na.rm=T)
polygon(c(x, rev(x)), c(upper, rev(lower)), col=paste(col, tr, sep=""), border=NA)
}
paperwidth = 8
dpi = 600
hToWRatio = 0.45
width = as.integer(dpi*paperwidth)
height = as.integer(width * hToWRatio)
fontsize = 12
# png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.naive, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.naive, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.int, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.int, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
# dev.off()
rm(list=ls())
setwd("~/Dropbox/work/projects/Cross-Scale-Model-Integration-Examples_git/example_2")
library(coda)
library(gam)
validation = readRDS("dat/rawData.rds")$valid
calib = readRDS("dat/rawData.rds")$calib
load("results/posteriors.rdata")
makePred = function(bn, data) {
with(data, plogis(bn[1] + bn[2]*ddeg + bn[3]*ddeg^2 + bn[4]*ddeg^3 +
bn[5]*an_prcp + bn[6]*an_prcp^2 + bn[7]*pToPET + bn[8]*pToPET^2))
}
## presDat = validation$presObs
presDat = with(validation, PresObs + ifelse(is.na(pres), 0, pres))
classify = function(x, nclass) ifelse(x==1, nclass-1, floor(x*nclass))/nclass
ncats=20
xvals = seq(0.05, 0.95, length.out=ncats)
predict.x = data.frame(xvals=seq(0,1, length.out=200))
gam.preds.naive = matrix(NA, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
gam.preds.int = matrix(NA, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
n.gam.naive = matrix(0, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
n.gam.int = matrix(0, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
for(i in 1:nrow(naivePosterior))
{
preds.naive = data.frame(pres=presDat, predict=makePred(naivePosterior[i,], validation))
preds.int = data.frame(pres=presDat, predict=makePred(intPresPosterior[i,], validation))
# classify predictions
preds.naive$class = classify(preds.naive$predict, ncats)
preds.int$class = classify(preds.int$predict, ncats)
nclass.naive = length(unique(preds.naive$class))
nclass.int = length(unique(preds.int$class))
freqs.naive = freqs.int = nn = ni = rep(NA, ncats)
freqs.naive[1:nclass.naive] = as.numeric(with(preds.naive, table(pres, class)[2,] / table(class)))
freqs.int[1:nclass.int] = as.numeric(with(preds.int, table(pres, class)[2,] / table(class)))
nn[1:nclass.naive] = as.numeric(with(preds.naive, table(class)))
ni[1:nclass.int] = as.numeric(with(preds.int, table(class)))
n.gam.naive.mod = gam(I(log(nn))~s(xvals,3))
n.gam.int.mod = gam(I(log(ni))~s(xvals,3))
n.gam.naive[i,] = predict(n.gam.naive.mod, newdata=predict.x)
n.gam.int[i,] = predict(n.gam.int.mod, newdata=predict.x)
gam.naive.mod = gam(freqs.naive~s(xvals, 3))
gam.int.mod = gam(freqs.int~s(xvals, 3))
gam.preds.naive[i,] = predict(gam.naive.mod, newdata=predict.x)
gam.preds.int[i,] = predict(gam.int.mod, newdata=predict.x)
}
col.gam='#00ff33'
plot.int = function(x, y, col, tr='33')
{
upper = apply(y, 2, quantile, 0.975, na.rm=T)
lower = apply(y, 2, quantile, 0.025, na.rm=T)
polygon(c(x, rev(x)), c(upper, rev(lower)), col=paste(col, tr, sep=""), border=NA)
}
paperwidth = 8
dpi = 600
hToWRatio = 0.45
width = as.integer(dpi*paperwidth)
height = as.integer(width * hToWRatio)
fontsize = 12
# png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.naive, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.naive, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=c(0,1), ylim=c(0,1), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.int, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.int, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
# dev.off()
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=c(0,0.7), ylim=c(0,0.7), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.naive, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.naive, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=c(0,0.7), ylim=c(0,0.7), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 1, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.int, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.int, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=c(0,0.7), ylim=c(0,0.7), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 0.7, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.naive, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.naive, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=c(0,0.7), ylim=c(0,0.7), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 0.7, "Integrated Model", cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.int, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.int, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
# dev.off()
png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=c(0,0.7), ylim=c(0,0.7), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 0.7, paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.naive, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.naive, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=c(0,0.7), ylim=c(0,0.7), xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(c(0,1), c(0,1), lty=2)
text(0.2, 0.7, "Integrated Model", cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.int, na.rm=T), type='l', xlim=c(0,1), xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.int, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2)
dev.off()
fontsize = 12
png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
cal.lims = c(0,0.7)
n.lims = log(c(0.01, 3000))
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.naive, na.rm=T), type='l', xlim=c(0,1), ylim=n.lims, xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.naive, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
# mtext("Sample Size", side=4, line=1.5, cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), "Integrated Model", cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.int, na.rm=T), type='l', xlim=c(0,1), ylim=n.lims, xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.int, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2, cex=0.8)
dev.off()
setwd("~/Dropbox/work/projects/Cross-Scale-Model-Integration-Examples_git/example_2")
library(coda)
library(gam)
validation = readRDS("dat/rawData.rds")$valid
calib = readRDS("dat/rawData.rds")$calib
load("results/posteriors.rdata")
makePred = function(bn, data) {
with(data, plogis(bn[1] + bn[2]*ddeg + bn[3]*ddeg^2 + bn[4]*ddeg^3 +
bn[5]*an_prcp + bn[6]*an_prcp^2 + bn[7]*pToPET + bn[8]*pToPET^2))
}
## presDat = validation$presObs
presDat = with(validation, PresObs + ifelse(is.na(pres), 0, pres))
classify = function(x, nclass) ifelse(x==1, nclass-1, floor(x*nclass))/nclass
ncats=20
xvals = seq(0.05, 0.95, length.out=ncats)
predict.x = data.frame(xvals=seq(0,1, length.out=200))
gam.preds.naive = matrix(NA, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
gam.preds.int = matrix(NA, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
n.gam.naive = matrix(0, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
n.gam.int = matrix(0, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
for(i in 1:nrow(naivePosterior))
{
preds.naive = data.frame(pres=presDat, predict=makePred(naivePosterior[i,], validation))
preds.int = data.frame(pres=presDat, predict=makePred(intPresPosterior[i,], validation))
# classify predictions
preds.naive$class = classify(preds.naive$predict, ncats)
preds.int$class = classify(preds.int$predict, ncats)
nclass.naive = length(unique(preds.naive$class))
nclass.int = length(unique(preds.int$class))
freqs.naive = freqs.int = nn = ni = rep(NA, ncats)
freqs.naive[1:nclass.naive] = as.numeric(with(preds.naive, table(pres, class)[2,] / table(class)))
freqs.int[1:nclass.int] = as.numeric(with(preds.int, table(pres, class)[2,] / table(class)))
nn[1:nclass.naive] = as.numeric(with(preds.naive, table(class)))
ni[1:nclass.int] = as.numeric(with(preds.int, table(class)))
# 	n.gam.naive.mod = gam(I(log(nn))~s(xvals,3))
# 	n.gam.int.mod = gam(I(log(ni))~s(xvals,3))
n.gam.naive.mod = glm(I(log(nn))~xvals)
n.gam.int.mod = glm(I(log(ni))~xvals)
n.gam.naive[i,] = predict(n.gam.naive.mod, newdata=predict.x)
n.gam.int[i,] = predict(n.gam.int.mod, newdata=predict.x)
# 	gam.naive.mod = gam(freqs.naive~s(xvals, 3))
# 	gam.int.mod = gam(freqs.int~s(xvals, 3))
gam.naive.mod = glm(freqs.naive~xvals)
gam.int.mod = glm(freqs.int~xvals)
gam.preds.naive[i,] = predict(gam.naive.mod, newdata=predict.x)
gam.preds.int[i,] = predict(gam.int.mod, newdata=predict.x)
}
col.gam='#00ff33'
plot.int = function(x, y, col, tr='33')
{
upper = apply(y, 2, quantile, 0.975, na.rm=T)
lower = apply(y, 2, quantile, 0.025, na.rm=T)
polygon(c(x, rev(x)), c(upper, rev(lower)), col=paste(col, tr, sep=""), border=NA)
}
paperwidth = 8
dpi = 600
hToWRatio = 0.45
width = as.integer(dpi*paperwidth)
height = as.integer(width * hToWRatio)
fontsize = 12
png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
cal.lims = c(0,0.7)
n.lims = log(c(0.01, 3000))
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), paste("Naive Model\nn =", nrow(validation)), cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.naive, na.rm=T), type='l', xlim=c(0,1), ylim=n.lims, xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.naive, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
# mtext("Sample Size", side=4, line=1.5, cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), "Integrated Model", cex=0.8)
par(new=TRUE)
plot(predict.x$xvals, colMeans(n.gam.int, na.rm=T), type='l', xlim=c(0,1), ylim=n.lims, xaxt='n', yaxt='n', xlab='', ylab='')
plot.int(predict.x$xvals, n.gam.int, '#000000')
n.at=c(0.01, 0.1, 1, 10, 100, 1000)
axis(side=4, at=log(n.at), labels=as.character(n.at))
mtext("Sample Size", side=4, line=2, cex=0.8)
dev.off()
png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
cal.lims = c(0,0.7)
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), "Naive", cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), "Integrated-Present", cex=0.8)
dev.off()
setwd("~/Dropbox/work/projects/Cross-Scale-Model-Integration-Examples_git/example_2")
library(coda)
library(gam)
validation = readRDS("dat/rawData.rds")$valid
calib = readRDS("dat/rawData.rds")$calib
load("results/posteriors.rdata")
makePred = function(bn, data) {
with(data, plogis(bn[1] + bn[2]*ddeg + bn[3]*ddeg^2 + bn[4]*ddeg^3 +
bn[5]*an_prcp + bn[6]*an_prcp^2 + bn[7]*pToPET + bn[8]*pToPET^2))
}
## presDat = validation$presObs
presDat = with(validation, PresObs + ifelse(is.na(pres), 0, pres))
classify = function(x, nclass) ifelse(x==1, nclass-1, floor(x*nclass))/nclass
ncats=20
xvals = seq(0.05, 0.95, length.out=ncats)
predict.x = data.frame(xvals=seq(0,1, length.out=200))
gam.preds.naive = matrix(NA, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
gam.preds.int = matrix(NA, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
n.gam.naive = matrix(0, nrow=nrow(naivePosterior), ncol=nrow(predict.x))
n.gam.int = matrix(0, nrow=nrow(intPresPosterior), ncol=nrow(predict.x))
for(i in 1:nrow(naivePosterior))
{
preds.naive = data.frame(pres=presDat, predict=makePred(naivePosterior[i,], validation))
preds.int = data.frame(pres=presDat, predict=makePred(intPresPosterior[i,], validation))
# classify predictions
preds.naive$class = classify(preds.naive$predict, ncats)
preds.int$class = classify(preds.int$predict, ncats)
nclass.naive = length(unique(preds.naive$class))
nclass.int = length(unique(preds.int$class))
freqs.naive = freqs.int = nn = ni = rep(NA, ncats)
freqs.naive[1:nclass.naive] = as.numeric(with(preds.naive, table(pres, class)[2,] / table(class)))
freqs.int[1:nclass.int] = as.numeric(with(preds.int, table(pres, class)[2,] / table(class)))
nn[1:nclass.naive] = as.numeric(with(preds.naive, table(class)))
ni[1:nclass.int] = as.numeric(with(preds.int, table(class)))
# 	n.gam.naive.mod = gam(I(log(nn))~s(xvals,3))
# 	n.gam.int.mod = gam(I(log(ni))~s(xvals,3))
# 	n.gam.naive.mod = glm(I(log(nn))~xvals)
# 	n.gam.int.mod = glm(I(log(ni))~xvals)
# 	n.gam.naive[i,] = predict(n.gam.naive.mod, newdata=predict.x)
# 	n.gam.int[i,] = predict(n.gam.int.mod, newdata=predict.x)
# 	gam.naive.mod = gam(freqs.naive~s(xvals, 3))
# 	gam.int.mod = gam(freqs.int~s(xvals, 3))
# 	gam.naive.mod = glm(freqs.naive~xvals)
# 	gam.int.mod = glm(freqs.int~xvals)
gam.naive.mod = glm(freqs.naive~xvals, weights=nn)
gam.int.mod = glm(freqs.int~xvals, weights=ni)
gam.preds.naive[i,] = predict(gam.naive.mod, newdata=predict.x)
gam.preds.int[i,] = predict(gam.int.mod, newdata=predict.x)
}
col.gam='#00ff33'
plot.int = function(x, y, col, tr='33')
{
upper = apply(y, 2, quantile, 0.975, na.rm=T)
lower = apply(y, 2, quantile, 0.025, na.rm=T)
polygon(c(x, rev(x)), c(upper, rev(lower)), col=paste(col, tr, sep=""), border=NA)
}
paperwidth = 8
dpi = 600
hToWRatio = 0.45
width = as.integer(dpi*paperwidth)
height = as.integer(width * hToWRatio)
fontsize = 12
png(w=width, h=height, file="ex2_calib.png", pointsize=fontsize, res = dpi)
cal.lims = c(0,0.7)
par(mfrow=c(1,2), mar=c(3,3,0.3, 3), mgp=c(2,0.5,0), tck=-0.01, bty='n', cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.naive, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.naive, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), "Naive", cex=0.8)
plot(predict.x$xvals, colMeans(gam.preds.int, na.rm=T), col=col.gam, type='l',
xlim=cal.lims, ylim=cal.lims, xlab="Predicted Probability of Presence", ylab="Observed Proportion Present")
plot.int(predict.x$xvals, gam.preds.int, col.gam)
lines(cal.lims, cal.lims, lty=2)
text(0.2, max(cal.lims), "Integrated-Present", cex=0.8)
dev.off()
