cat("hello")
dbh <- scan()
pctser <- scam()
45.1612903226.8882175249.0301724134.1463414647.810218980.8498583570.29850746344.132653062.0057306594.1916167663.3240997234.3715846995.76923076910.4395604411.462450595.3030303035.21472392648.8764044934.220532322.7972027973.5019455252.0080321292.39726027411.351351355.241935484
pctser <- scan()
elev <- scan()
dat <- data.frame(elev, pctser, dbh)
head(dat)
dat$he <- (elev > median(elev))
dat
with(dat[!dat$he,], cor(pctser, dbh))
ser <- scan()
ns <- scan()
tot <- ser+ns
cor(tot, pctser)
cor(tot, dbh)
ba <- scan()
ba
ba <- ba[-19]
cor(ba, dbh)
cor(ba, tot)
dat$tot <- tot
dat$ba <- ba
cor(dat[!dat$he])
cor(dat[!dat$he,])
cor(dat)
cor(dat[dat$he,])
ctest <- function() {
a <- runif(1)
b <- runif(1)
cor(a,b)}
res <- sapply(1:1000, function(i) ctest())
hist(res)
head(res)
ctest
ctest()
runif(1)
ctest <- function() {
a <- runif(3)
b <- runif(3)
cor(a,b)}
res <- sapply(1:1000, function(i) ctest())
hist(res)
ctest <- function(n) {
a <- runif(n)
b <- runif(n)
cor(a,b)
}
res <- sapply(1:1000, function(i) ctest(10))
hist(res)
res <- sapply(1:1000, function(i) ctest(5))
hist(res)
sum((res>0.7)/1000)
res <- sapply(1:1000, function(i) ctest(10))
sum((res>0.7)/1000)
sum((abs(res>0.7))/1000)
sum((abs(res)>0.7)/1000)
res <- sapply(1:1000, function(i) ctest(5))
sum((abs(res)>0.7)/1000)
res <- sapply(1:1000, function(i) ctest(4))
sum((abs(res)>0.7)/1000)
res <- sapply(1:1000, function(i) ctest(3))
sum((abs(res)>0.7)/1000)
save(integratedModel, file=name)
df = data.frame(a=rnorm(100), b=rnorm(100),c=runif(100))
with(df,
c <<- a*b*c)
c = numeric(100)
with(df,
c <<- a*b*c)
c
a = c(1,2,3,4)
a
a[5] = 6
a
a[10] = 5
a
a = list(1,2,3,4)
a
a[[20]] = 7
a
pr = c(3,4)
val = 1
dnorm(val, pr[1], pr[2])
dnorm(val - pr[1], 0, pr[2])
setwd("/Users/mtalluto/Documents/git_projects/Cross-Scale-Model-Integration-Examples/example_2")
load("results/predictions.rdata")load("dat/maple.rdata")source("ex2_Functions.r")library(fields)library(rgdal)in.range = function(x, lims) x >= lims[1] & x <= lims[2]if(!exists('ocean')) ocean = readOGR(dsn="dat/ne_110m_ocean", layer="ne_110m_ocean")pdfFileName = "ex2.pdf"pdfWidth = 7.5pdfHeight = 6titleCEX = 0.7meanCols = c(3,5,7,11)SECols = meanCols + 1
head(predictions)
nrow(predictions)
statsCSV = read.csv("results/stats-noPriors.csv", header=T)
head(statsCSV)
nrow(statsCSV)
nrow(maple)
statsCSV = cbind(statsCSV, maple$long, maple$lat)
head(statsCSV)
predictions$intPresent = rep(0, nrow(predictions))
predictions$intPresentSE = rep(0, nrow(predictions))
predictions$intFuture = rep(0, nrow(predictions))
predictions$intFutureSE = rep(0, nrow(predictions))
colnames(statsCSV[5:6]) = c('long','lat')
head(statsCSV)
length(which(predictions$lat == statsCSV$lat & predictions$long == statsCSV$long))
length(which(predictions$lat == statsCSV$lat ))
range(predictions$lat)
range(statsCSV$lat)
head(statsCSV)
names(statsCSV)
colnames(statsCSV)
colnames(statsCSV)[5:6] = c('long','lat')
length(which(predictions$lat == statsCSV$lat ))
sapply(statsCSV$lat, function(x) length(which(predictions$long == x)))
sapply(statsCSV$lat, function(x) length(which(predictions$lat == x)))
for(i in 1:nrow(statsCSV)) {	print(which(predictions$long == statsCSV$long[i] & predictions$lat == statsCSV$lat[i]))}
head(predictions)
head(statsCSV)
for(i in 1:nrow(statsCSV)) {	ind = which(predictions$long == statsCSV$long[i] & predictions$lat == statsCSV$lat[i]))	predictions$intFuture[ind] = statsCSV$mean[i]	predictions$intFutureSE[ind] = statsCSV$SE[i]}
for(i in 1:nrow(statsCSV)) {	ind = which(predictions$long == statsCSV$long[i] & predictions$lat == statsCSV$lat[i])	predictions$intFuture[ind] = statsCSV$mean[i]	predictions$intFutureSE[ind] = statsCSV$SE[i]}
library(fields)library(rgdal)in.range = function(x, lims) x >= lims[1] & x <= lims[2]if(!exists('ocean')) ocean = readOGR(dsn="dat/ne_110m_ocean", layer="ne_110m_ocean")pdfFileName = "ex2.pdf"pdfWidth = 7.5pdfHeight = 6titleCEX = 0.7meanCols = c(3,5,7,11)SECols = meanCols + 1
load("results/integratedModel.rdata")
head(integratedModel)
nrow(integratedModel)
ncol(integratedModel)
head(integratedModel)
summary(integratedModel)
class(integratedModel)
library(coda)
load('results/naiveModel.rdata')
thinLength = 50
burnin = 500000
thin = function(x, n) {	ind = seq(1, nrow(x),  n)	return(x[ind,])}integratedModel = read.csv("results/integratedModel.csv", header=FALSE, stringsAsFactors=FALSE)
integratedModel = read.csv("results/integratedModel-noPriors.csv", header=FALSE, stringsAsFactors=FALSE)
nrow(integratedModel)
colnames(integratedModel) = variables$parameter
startVal = burnin + 1
endVal = nrow(integratedModel)
integratedModel = integratedModel[(burnin+1):nrow(integratedModel),]
integratedModel = thin(integratedModel, thinLength)
integratedModel = mcmc(integratedModel, start = startVal, end = endVal, thin = thinLength)
summary(integratedModel)
save(integratedModel, file="results/integratedModel.rdata")
load("dat/maple.rdata")
load("results/naiveModel.rdata")
source("ex2_Functions.r")
presClimate = mapleAll[,which(colnames(maple) %in% unique(variables$varNames))]futClimate = mapleAll[,which(substr(colnames(maple),5, nchar(colnames(maple))) %in% unique(variables$varNames))]validationClimate = mapleValidation[,which(colnames(maple) %in% unique(variables$varNames))]validationFutClimate = mapleValidation[,which(substr(colnames(maple),5, nchar(colnames(maple))) %in% unique(variables$varNames))]colnames(futClimate) = colnames(validationFutClimate) = colnames(presClimate)
intPosterior = integratedModel
intPresPred = process_output(intPosterior, newData=presClimate, FALSE, FALSE, FALSE)
intFutPred = process_output(intPosterior, newData=futClimate, FALSE, FALSE, FALSE)
intValidPred = process_output(intPosterior, newData = validationClimate, SE=FALSE, credInterval=FALSE)
intValidPredFut = process_output(intPosterior, newData = validationFutClimate, SE=FALSE, credInterval=FALSE)
predictions = cbind(mapleAll[,1:2], naivePresPred$fit, naivePresPred$se.fit, naiveFutPred$fit, naiveFutPred$se.fit, intPresPred, intFutPred)
head(predictions)
intValidPred
is.data.frame(intValidPred)
intValidPred$se = intValidPred$lower = intValidPred$upper = rep(0, nrow(intValidPred))
intValidPredFut$se = intValidPredFut$lower = intValidPredFut$upper = rep(0, nrow(intValidPred))
predictions = cbind(mapleAll[,1:2], naivePresPred$fit, naivePresPred$se.fit, naiveFutPred$fit, naiveFutPred$se.fit, intPresPred, intFutPred)
colnames(predictions) = c("long", "lat",
'naivePresent', 'naivePresentSE', 'naiveFuture', 'naiveFutureSE',
'intPresent', 'intPresentSE', 'intPresentLower', 'intPresentUpper',
'intFuture', 'intFutureSE', 'intFutureLower', 'intFutureUpper')
head(predictions)
head(intValidPred)
intValidPred = process_output(intPosterior, newData = validationClimate, SE=FALSE, credInterval=FALSE)
intValidPredFut = process_output(intPosterior, newData = validationFutClimate, SE=FALSE, credInterval=FALSE)
intPresPred$se = intPresPred$lower = intPresPred$upper = rep(0, nrow(intPresPred))
intFutPred$se = intFutPred$lower = intFutPred$upper = rep(0, nrow(intFutPred))
predictions = cbind(mapleAll[,1:2], naivePresPred$fit, naivePresPred$se.fit, naiveFutPred$fit, naiveFutPred$se.fit, intPresPred, intFutPred)
colnames(predictions) = c("long", "lat", 	'naivePresent', 'naivePresentSE', 'naiveFuture', 'naiveFutureSE',	'intPresent', 'intPresentSE', 'intPresentLower', 'intPresentUpper',	'intFuture', 'intFutureSE', 'intFutureLower', 'intFutureUpper')
validation = list(data = cbind(mapleValidation[,1:5], naiveValidPred, intValidPred))colnames(validation$data) = c('long', 'lat', 'presence', 'phenofitPres', 'phenofitFut', 'naive', 'integrated')validation$integratedPresR2 = cor(validation$data$phenofitPres, validation$data$integrated)^2validation$integratedPresR2 = cor(validation$data$phenofitPres, validation$data$integrated)^2
?vapply
?"[]"
?"["
a = list(rnorm(5), rnorm(5), rnorm(5))
[(a,2)
[(a,,2)
?seq_along
